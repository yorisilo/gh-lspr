#!/bin/bash
set -e

# 自分の GitHub ユーザー名を設定
GITHUB_USER=$(gh api user -q .login)

limit=10

filtered_prs_query=''

requested_prs_query='is:open is:pr review-requested:@me'

created_prs_query='is:open is:pr author:@me'

mentioned_prs_query='is:open is:pr mentions:@me'

# reviewed_prs_query を承認済みフラグとして利用
reviewed_prs_query='is:open is:pr reviewed-by:@me'

assigned_prs_query='is:open is:pr assignee:@me'

org=''

show_help() {
  cat <<-EOF
This extension helps you to check pull requests which you need to respond.

USAGE
  $ gh lspr [flags]

FLAGS
  -rr, --review-requested   Filter by review requested to others
  -r, --reviewed            Filter by reviewed by me
  -c, --created             Filter by created by myself
  -m, --mentioned           Filter by mentioned to me
  -a, --assigned            Filter by assigned to me
  -o, --org                 Filter by organization name or user name
  -l, --limit               Maximum number of items to fetch (default 10)
  -h, --help                Show help
EOF
}

show_filtered_pr_list() {
  local query='
  query ($q: String!, $limit: Int = 10) {
    search(first: $limit, type: ISSUE, query: $q) {
      nodes {
        ... on PullRequest {
          number
          title
          url
          updatedAt
          repository {
            name
          }
          reviews(first: 10) {
            nodes {
              state
              author {
                login
              }
            }
          }
        }
      }
    }
  }
  '

  local template='
{{- range $pr := .data.search.nodes -}}
  {{- $is_approved := false -}}
  {{- range $review := $pr.reviews.nodes -}}
    {{- if and (eq $review.state "APPROVED") (eq $review.author.login "'$GITHUB_USER'") -}}
      {{- $is_approved = true -}}
    {{- end -}}
  {{- end -}}

  {{- if $is_approved -}}
    {{- printf "#%v %s ✅" .number (truncate 40 .title) | autocolor "green" }}
  {{- else -}}
    {{- printf "#%v %s ❌" .number (truncate 40 .title) | autocolor "green" }}
  {{- end -}}

  {{- printf " %s" (.url | autocolor "cyan") -}}
  {{- printf " %s" (.updatedAt | timeago | autocolor "white") -}}
{{- end -}}

{{ if eq (len .data.search.nodes) 0 }}
{{- printf "No pull requests match your filter" -}}
{{ else }}
{{- tablerender -}}
{{ end }}
'

  gh api graphql -F q="$1" -F limit="$limit" -f query="$query" --template="$template"
}

show_multiple_pr_lists() {
  local query='
  fragment pr on PullRequest {
    ... on PullRequest {
      number
      title
      url
      updatedAt
      repository {
        name
      }
      reviews(first: 10) {
        nodes {
          state
          author {
            login
          }
        }
      }
    }
  }

  query ($createdPRQuery: String!, $requestedPRQuery: String!, $mentionedPRQuery: String!, $reviewedPRQuery: String!, $assignedPRQuery: String!, $limit: Int = 10) {
    createdPR: search(first: $limit, type: ISSUE, query: $createdPRQuery) {
      nodes {
        ...pr
      }
    }
    requestedPR: search(first: $limit, type: ISSUE, query: $requestedPRQuery) {
      nodes {
        ...pr
      }
    }
    mentionedPR: search(first: $limit, type: ISSUE, query: $mentionedPRQuery) {
      nodes {
        ...pr
      }
    }
    reviewedPR: search(first: $limit, type: ISSUE, query: $reviewedPRQuery) {
      nodes {
        ...pr
      }
    }
    assignedPR: search(first: $limit, type: ISSUE, query: $assignedPRQuery) {
      nodes {
        ...pr
      }
    }
  }
  '

  local template='
{{- printf "👀 Review requested pull requests\n" | autocolor "magenta+b" -}}

{{- range $pr := .data.requestedPR.nodes -}}
  {{- $is_approved := false -}}
  {{- range $review := $pr.reviews.nodes -}}
    {{- if and (eq $review.state "APPROVED") (eq $review.author.login "'$GITHUB_USER'") -}}
      {{- $is_approved = true -}}
    {{- end -}}
  {{- end -}}

  {{- if $is_approved -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ✅") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- else -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ❌") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- end -}}
{{- end -}}

{{ if eq (len .data.requestedPR.nodes) 0 }}
{{- printf "No review requested pull requests\n" -}}
{{ else }}
{{- tablerender -}}
{{ end }}

{{- printf "\n📝 Reviewed pull requests\n" | autocolor "magenta+b" -}}

{{- range $pr := .data.reviewedPR.nodes -}}
  {{- $is_approved := false -}}
  {{- range $review := $pr.reviews.nodes -}}
    {{- if and (eq $review.state "APPROVED") (eq $review.author.login "'$GITHUB_USER'") -}}
      {{- $is_approved = true -}}
    {{- end -}}
  {{- end -}}

  {{- if $is_approved -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ✅") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- else -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ❌") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- end -}}
{{- end -}}

{{ if eq (len .data.reviewedPR.nodes) 0 }}
{{- printf "No reviewed pull requests\n" -}}
{{ else }}
{{- tablerender -}}
{{ end }}

{{- printf "\n✋ Mentioned pull requests\n" | autocolor "magenta+b" -}}

{{- range $pr := .data.mentionedPR.nodes -}}
  {{- $is_approved := false -}}
  {{- range $review := $pr.reviews.nodes -}}
    {{- if and (eq $review.state "APPROVED") (eq $review.author.login "'$GITHUB_USER'") -}}
      {{- $is_approved = true -}}
    {{- end -}}
  {{- end -}}

  {{- if $is_approved -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ✅") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- else -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ❌") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- end -}}
{{- end -}}

{{ if eq (len .data.mentionedPR.nodes) 0 }}
{{- printf "No mentioned pull requests\n" -}}
{{ else }}
{{- tablerender -}}
{{ end }}

{{- printf "\n📂 Created pull requests\n" | autocolor "magenta+b" -}}

{{- range $pr := .data.createdPR.nodes -}}
  {{- $is_approved := false -}}
  {{- range $review := $pr.reviews.nodes -}}
    {{- if and (eq $review.state "APPROVED") (eq $review.author.login "'$GITHUB_USER'") -}}
      {{- $is_approved = true -}}
    {{- end -}}
  {{- end -}}

  {{- if $is_approved -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ✅") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- else -}}
    {{- tablerow (printf "#%v" $pr.number | autocolor "green") (truncate 40 $pr.title | printf "%s ❌") ($pr.url | autocolor "cyan") ($pr.updatedAt | timeago | autocolor "white") -}}
  {{- end -}}
{{- end -}}

{{ if eq (len .data.createdPR.nodes) 0 }}
{{- printf "No created pull requests\n" -}}
{{ else }}
{{- tablerender -}}
{{ end }}
'

  gh api graphql -F createdPRQuery="$1" \
    -F requestedPRQuery="$2" \
    -F mentionedPRQuery="$3" \
    -F reviewedPRQuery="$4" \
    -F assignedPRQuery="$5" \
    -F limit="$limit" \
    -f query="$query" \
    --template="$template"
}

handle_filter_flag() {
  if [ -n "$filtered_prs_query" ] ; then
    if [ -n "$org" ] ; then
      show_filtered_pr_list "$filtered_prs_query org:$org"
      exit 0
    fi

    show_filtered_pr_list "$filtered_prs_query"
    exit 0
  fi
}

handle_org_flag() {
  if [ -n "$org" ] ; then
    show_multiple_pr_lists "$created_prs_query org:$org" "$requested_prs_query org:$org" "$mentioned_prs_query org:$org" "$reviewed_prs_query org:$org" "$assigned_prs_query org:$org"
    exit 0
  fi
}

while [ $# -gt 0 ]; do
  case "$1" in
  -rr|--review-requested)
    filtered_prs_query="$requested_prs_query"
    ;;
  -c|--created)
    filtered_prs_query="$created_prs_query"
    ;;
  -m|--mentioned)
    filtered_prs_query="$mentioned_prs_query"
    ;;
  -r)
    filtered_prs_query="$reviewed_prs_query"
    ;;
  -a|--assigned)
    filtered_prs_query="$assigned_prs_query"
    ;;
  -h|--help)
    show_help
    exit 0
    ;;
  -l|--limit)
    limit=$2
    ;;
  -o|--org)
    org=$2
    ;;
  esac
  shift
done

handle_filter_flag
handle_org_flag

show_multiple_pr_lists "$created_prs_query" "$requested_prs_query" "$mentioned_prs_query" "$reviewed_prs_query" "$assigned_prs_query"
